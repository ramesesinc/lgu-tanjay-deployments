import com.rameses.annotations.*;

class OboControlService {
	
	@Service("DateService")
	def dateSvc;

	@DataContext("obo_doctype")
	def doctypeEm;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@Service("MenuNotificationService")
    def notificationSvc;

    @DataContext("obo_control")
    def controlEm;

	@DataContext("obo_app_doc")
    def docEm;

	@DataContext("vw_obo_app_doc")
    def vwDocEm;

	@Env
	def env;

	@ProxyMethod
	public def saveControl( def doc ) {
		if(!doc.dtissued) doc.dtissued = dateSvc.getServerDate();
		if(!doc.state) doc.state = 1;

		def doctype = doc.doctype;
		def u = [:];
		u.state = doc.state;
		u.appid = doc.appid;
		u.docid = doc.objid;
		u.issuedby = doc.issuedby;
		u.dtissued = doc.dtissued;
		u.doctypeid = doc.doctypeid;
		u.controlno = doc.controlno;
		u.remarks = doc.remarks;
		u.expirydate = doc.expirydate;
		u.template = doctype.template;
		u.approverid = doctype.approverid;
		u.endorserid = doctype.endorserid;
		u.reportheader = doctype.reportheader;
		u = controlEm.create( u );
		docEm.find( [objid: doc.objid] ).update( [controlid: u.objid ] );
		return u;
	}


	@ProxyMethod
	public def autoIssue( def p ) {
		if(!p.objid) throw new Exception("objid is required in OboControlService.autoIssue");
		def doc = vwDocEm.find( [objid: p.objid ] ).first();
		if(doc.controlid) throw new Exception("OboControlService.autoIssue. Control no for " + doc.doctypeid + " is already issued");
		def doctype = doc.doctype;
		if(doctype.issuetype != 1) throw new Exception("OboControlService.autoIssue. Issue type for " + doctype.title + " should be 1" );

		def pattern = doctype.controlnopattern;
		if(!pattern) throw new Exception("Please define controlnopattern entry in doctype " + doctype.title );
		if(pattern.contains("[parentno]")) {
			if(!doctype.refdoc) throw new Exception("[parentno] pattern for " + doctype.title + " requires refdoc to be specified" );
			def refdoc = doctype.refdoc;
			def parentDoc = vwDocEm.find( [appid: doc.appid ] ).where("doctype.objid = :doctypeid", [doctypeid: refdoc] ).first();
			if(!parentDoc) return null;
			doc.controlno = pattern.replace("[parentno]", parentDoc.controlno );
		}
		else {
			doc.controlno = controlNoSvc.getNextNo( pattern );				
		} 
		doc.issuedby = [:]
		return saveControl( doc );
	}

	@ProxyMethod
	public def create( def p ) {
		if(!p.objid ) throw new Exception("objid is required in OboControlService.create");
		if(!p.controlno ) throw new Exception("controlno is required in OboControlService.create");

		def doc = vwDocEm.find( [objid: p.objid ] ).first();
		if(doc.controlid) throw new Exception("Control no for " + doc.doctypeid + " is already issued");
		def doctype = doc.doctype;


		def refDocs = doctypeEm.find( [refdoc: doctype.objid ] ).list()*.objid;
		if( refDocs ) {
			//find all ref docs that have not yet been issued
			def str = "('" + refDocs.join("','") + "')";
			def unissued = docEm.find( [appid: doc.appid ] ).where("controlid IS NULL AND doctypeid IN " + str ).list()*.doctype?.title;
			if( unissued )
				throw new Exception("Please issue the ff. reference documents first \n" + unissued.join("\n"));
		}

		doc.issuedby = [ objid: env.USERID, name: env.FULLNAME ];
		doc.dtissued = p.dtissued;
		doc.controlno = p.controlno;
		doc.expirydate = p.expirydate;
		def c = saveControl( doc );

		//send notification
		def notList = [];
		notList << "obo";
		notList << "obo_app_doc:" + doctype.objid.toLowerCase();
		notificationSvc.notify( notList );			

		return c;
	}	
	
	@ProxyMethod
	public void deleteControls( def o ) {
		if(!o.appid ) throw new Exception("appid is required in OboControlService.deleteControls");
		controlEm.find( [appid: o.appid] ).delete();
	}


}