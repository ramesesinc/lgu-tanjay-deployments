import com.rameses.annotations.*;

class OccupancyRpuService {
	
	@DataContext("building_permit_rpu")
	def bRpuEm;

	@DataContext("occupancy_rpu")
	def rpuEm;

	@DataContext("occupancy_rpu_item")
	def rpuItemEm;

	@DataContext("vw_occupancy_rpu")
	def vwRpuEm;

	@DataContext("vw_occupancy_certificate")
	def appEm;

	@Service("DateService")
	def dateSvc;

	@Service("MenuNotificationService")
	def menuSvc;

	@Service(value="RPTCertificationOnlineService", connection="rpt")
	def rptCertSvc;

	@Service("MenuNotificationService")
    def notificationSvc;

	@Service(value="RPTOboPluginService", connection="rpt")
	def rptPluginSvc;

    @Env
    def env;

    @ProxyMethod
    public void activateTask(def o) {
    	if(!o.appid) throw new Exception("appid is required in OccupancyRpuService" );

		def exists = rpuEm.find( [appid: o.appid ]).exists();
		if( !exists ) {
			def m = [:];
			m.appid = o.appid;
			m.state = 0;
			m.dtcreated = dateSvc.getServerDate();
			rpuEm.create( m ); 
		}    
    	def notList = [];
		notList << "occupancy_rpu";
		notList << "obo-rpt";
		notificationSvc.notify( notList );
    }

    @ProxyMethod
    public def getBldgRpus( def o  ) {
    	if(!o.appid) throw new Exception("appid is required");
    	return bRpuEm.find( [appid: o.appid ]).list();
    }

	@ProxyMethod
	public void saveFaas( def o ) {
		if(!o.objid) throw new Exception("objid is required");
		rpuEm.find( [objid: o.objid ]).update( [faasid: o.faasid, state: 1 ] );
		def list = [];
		list << "occupancy_rpu";
		list << "obo-rpt";
		menuSvc.notify( list );					
	}

	@ProxyMethod
	public void updateInfo( def o ) {
		def rpu = vwRpuEm.find([appid: o.appid]).first();
		if( !rpu.truecopycertid ) throw new Exception("Please generate the appropriate RPT assessment documents first (True copy certificate). Contact assessors office for assistance");
		if( !rpu.noaid ) throw new Exception("Please generate the appropriate RPT assessment documents first (NOA). Contact assessors office for assistance");

		def r = [:];
		r.faasid = rpu.faasid;
		r.permitno = rpu.occpermitno;
		r.permitdtissued = rpu.occpermitdtissued;
		r.bldgpermitno = rpu.bldgpermitno;
		r.bldgpermitdtissued = rpu.bldgpermitdtissued;

		rptPluginSvc.updateOccupancy( r );
		rpuEm.find( [objid: rpu.objid ]).update( [state: 2]);

		def list = [];
		list << "occupancy_rpu";
		list << "obo-rpt";
		menuSvc.notify( list );
	}

	@ProxyMethod
	public def generateTruecopy(def o) {
		def rpu = rpuEm.find( [objid: o.objid] ).first();
		def app = appEm.find( [objid: rpu.appid] ).first();
		def params = [:];
		params.faas = [objid: rpu.faasid ];
		//params.requestedby = [name:"", address:""];
		params.refid = app.objid;
		params.refno = app.trackingno;	
		params.refdate = app.appdate;
		if( !params.refdate ) params.refdate = dateSvc.getServerDate();
		params.reftype = "occupancy_permit";
		params.purpose = "For Certificate of Occupancy"

		def u = [:];
		def cert = rptCertSvc.issueTrueCopy(params);
		u.truecopycertid = cert.objid;				
		u.truecopycertfee = 0;
		u.tdno = rptPluginSvc.getTdno([objid: rpu.faasid ] )?.tdno;
		rpuEm.find( [objid: rpu.objid]).update( u );
		return u;
	}

	@ProxyMethod
	public def generateMachineryEntries(def o) {
		def rpu = rpuEm.find( [objid: o.objid] ).first();
		if(!rpu) throw new Exception("Occupancy rpu not found");

		def app = appEm.find( [objid: rpu.appid] ).first();
		def list = rptPluginSvc.getLinkRpus( [faasid: rpu.faasid]);

		list.each {
			if(!rpuItemEm.find( [faasid: it.objid, parentid: o.objid] ).exists()) {
				def params = [:];
				params.faas = [objid: it.objid ];
				params.refid = app.objid;
				params.refno = app.trackingno;	
				params.refdate = app.appdate;
				if( !params.refdate ) params.refdate = dateSvc.getServerDate();
				params.reftype = "occupancy_permit";
				params.purpose = "For Certificate of Occupancy"
				def cert = rptCertSvc.issueTrueCopy(params);
				def z = [:];
				z.parentid = rpu.objid;
				z.faasid = it.objid;
				z.truecopycertid = cert.objid;
				z.tdno = it.tdno;
				z.pin = it.pin;
				z.truecopycertfee = 0;
				rpuItemEm.create(z); 	
			}
		}
	}

	@ProxyMethod
	public def issueNOA(def o) {
		//issue NOA
		def rpu = rpuEm.find( [objid: o.objid] ).first();
		def app = appEm.find( [objid: rpu.appid] ).first();
		def params = [:];

		def items = [];
		items << [objid: rpu.faasid ];

		def links = rpuItemEm.find( [parentid: rpu.objid] ).list();
		links.each {
			items << [objid: it.faasid];
		}
		params.faases = items;

		//params.requestedby = [name:"", address:""];
		params.refid = app.objid;
		params.refno = app.trackingno;	
		params.refdate = app.appdate;
		if( !params.refdate ) params.refdate = dateSvc.getServerDate();
		params.reftype = "occupancy_permit";
		params.purpose = "For Certificate of Occupancy"		
    	def noa = rptCertSvc.issueNOA(params);

    	def u = [:];
    	u.noaid = noa.objid;
    	rpuEm.find( [objid: rpu.objid]).update( u );
    	return u;
	}	

}