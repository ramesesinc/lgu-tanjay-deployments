import com.rameses.annotations.*; 

class OboMenuNotificationInterceptor {
	
	@Service("WorkflowTaskCountService")
	def taskCountSvc;

	@DataContext("building_permit")
	def bldgPermitEm;

	@ActiveDB("obo_taskitem_type")
	def taskitemType;

	@DataContext("obo_app_doc")
	def appDocEm;

	@Service("UserRoleService")
	def userRole;

	@DataContext("sys_wf")
	def wfEm;

	@Env
	def env;

	/************************************************************************************************************
	* THIS IS THE COUNT FOR MAIN MENU
	************************************************************************************************************/
	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'obo' }")
	public void getDomainCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def orgid = (env.ORGROOT ==1 ) ? "root" : env.ORGID;
		def roleStr = userRole.getRolesString( [:] );

		def cnt = 0;
		def nid = p.notificationid;

		//Building Application count
		def g = wfEm.getTaskCount( [processname: "building_permit", roles:roleStr, userid: env.USERID  ] );
		if( g ) cnt += g.sum{ it.count };

		//Task item count
		g = taskitemType.getAllTaskCount( [roles: roleStr, orgid: orgid, userid: env.USERID ] );
	 	if( g ) cnt += g.sum{ it.count };

	 	//Occupancy Permit
		g = wfEm.getTaskCount( [processname: "occupancy_certificate", roles:roleStr, userid: env.USERID ] );
		if( g ) cnt += g.sum{ it.count };

		g = appDocEm.findAllDocsToReleaseCount( [roles: roleStr,orgid: orgid] );
		if( g ) cnt += g.count;

		result.count = cnt;
	}	


	/************************************************************************************************************
	* THIS IS THE COUNT FOR OBO MAIN MENU
	************************************************************************************************************/
	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'building_permit' }")
	public void getBuildingApplicationTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		def roleStr = userRole.getRolesString( [:] );
		result.count = 0;
		def g = wfEm.getTaskCount( [processname: "building_permit", roles:roleStr, userid: env.USERID  ] );
		if( g ) result.count = g.sum{ it.count };
	}	

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid.startsWith('obo_app_taskitem:') }")
	public void getOboTaskitemCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		def cnt = taskCountSvc.getProcessTaskCount( [processname: "obo_app_taskitem", domain: "OBO", notificationid: nid ] );
		if(cnt) result.count = cnt.count;
	}	

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid.startsWith('obo_app_doc') }")
	public void getAppDocCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		def docid = nid.substring( nid.lastIndexOf(":")+ 1);
		def roleStr = userRole.getRolesString( [:] );
		def cnt = appDocEm.findDocsToReleaseCount( [doctypeid: docid , roles: roleStr ] )?.count;
		result.count = cnt;
	}	

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'occupancy_certificate' }")
	public void getOccupancyApplicationTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		def roleStr = userRole.getRolesString( [:] );
		result.count = 0;
		def g = wfEm.getTaskCount( [processname: "occupancy_certificate", roles:roleStr, userid: env.USERID  ] );
		if( g ) result.count = g.sum{ it.count };
	}	

	/************************************************************************************************************
	* THIS IS THE COUNT FOR OBO MAIN MENU
	************************************************************************************************************/
	@After( pattern="WorkflowTaskCountService.getCustomNodeListTaskCount", eval="#{ args[0].processname == 'obo_app_taskitem' }" )
	public void loadCount(  def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def typeid = p.notificationid.substring( "obo_app_taskitem".length()+1 );  
		def roleStr = userRole.getRolesString( [:] );

		def list = taskitemType.getNodeListTaskCountByType( [typeid: typeid, roles: roleStr, userid: env.USERID ] );
		if( !list ) {
			list = [[count: 0]];
		}
		result.addAll( list );
	}


}