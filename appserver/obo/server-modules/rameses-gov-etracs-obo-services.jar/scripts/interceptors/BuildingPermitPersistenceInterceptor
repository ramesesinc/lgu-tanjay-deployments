import com.rameses.annotations.*;
import java.rmi.server.*;

class BuildingPermitPersistenceInterceptor {
	
	@Service("OboAppRequirementService")
	def reqSvc;

	@Service("OboAppProfessionalService")
	def profSvc;

	@Service("OboAppDocService")
	def appDocSvc;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_task")
	def appTaskEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("obo_app_entity")
	def entityEm;

	@DataContext("obo_payment")
	def paymentEm;

	@DataContext("obo_app_fee")
	def feeEm;

	@DataContext("building_permit_rpu")
	def rpuEm;

	@Env
	def env;

	private def calcFixedCost( def app ) {
		if( app.apptype == null || app.totalfloorarea==null || app.occupancytype==null ) {
			def zapp = vwAppEm.find( [objid: app.objid ] ).select("apptype,totalfloorarea,occupancytype.*").first();
			if(app.apptype==null) app.apptype = zapp.apptype;
			if(app.totalfloorarea==null) app.totalfloorarea = zapp.totalfloorarea;
			if(app.occupancytype==null) app.occupancytype = zapp.occupancytype;
		}
		//calculate the cost first before receiving		
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = app.occupancytype;
		return costSvc.calc( param );
	}

	private def formatAddress( def addr ) {
		def lst = [];
		lst << [addr.unitno, addr.bldgno, addr.bldgname ].findAll{it!=null}.join(" ");
		lst << [addr.street, addr.subdivision ].findAll{it!=null}.join(",");
		lst << [addr.barangay?.name, addr.citymunicipality, addr.province ].findAll{it!=null}.join(",");
		return lst.findAll{it}.join(",");		
	}


	//BUILDING PERMIT APPLICATION
	@Before(pattern="PersistenceService.update", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void beforeUpdateApplication(def evt) {
		def app = evt.args[0];
		if( app.supervisor ) {
			app.supervisorid = app.supervisor.objid;
		}
		if( app.totalfloorarea ) {
			app.fixedcost = calcFixedCost( app );	
		}
		if( app.occupancytype?.objid  ) {
			app.occupancytypeid = app.occupancytype?.objid;
			app.fixedcost = calcFixedCost( app );		
		}
		if( app.applicant?.objid ) {
			entityEm.find( [objid: app.applicant.objid]).update( app.applicant );
		}
		if( app.location ) {
			app.location.text = formatAddress( app.location );
		}
	}

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'vw_building_permit' }")
	public void afterOpenApplication(def evt) {
		def p = evt.args[0];
		def a = evt.result;
		a.occupancytype.title = a.occupancytype.title?.toUpperCase();

		//auto compute fees after opening:
		a.amount = feeEm.find([appid:a.objid]).select("c:{SUM(amount)}").val();
		a.payment = paymentEm.find([appid: a.objid ]).where("voided=0").orderBy("refdate DESC, refno DESC").first();

	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'building_permit' }")
	public void beforeRemoveApp( def evt ) {
		def p = evt.args[0];
		def app = vwAppEm.find( [objid: p.objid]).first();
		if( app.txnmode == "CAPTURE") {
			//do nothing
		}
		else if( app.task.state != 'receiving') 
			throw new Exception("Application can only be removed in receiving state");

		def u = [appid: app.objid ];		
		appEm.find( [objid: app.objid ]).update( [applicantid: "{NULL}", taskid: "{NULL}" ] );
		rpuEm.find( u ).delete();
		entityEm.find( u ).delete();
		appTaskEm.find( [refid: app.objid] ).delete();

		appDocSvc.deleteDocuments( u );
		profSvc.deleteAppProfessionals( u );
		reqSvc.deleteRequirements( u );
	} 


}