import com.rameses.annotations.*; 

class OboAppTransmittalFormReportInterceptor {
	
	@DataContext("sys_signature")
	def sigEm;
	
	@DataContext("obo_doctype")
	def doctypeEm;

	@DataContext("obo_app_transmittal")
	def transmittalEm;

	@DataContext("obo_app_requirement")
	def reqEm;

	@DataContext("obo_app_taskitem_finding")
	def findingEm;

	def formatText( def txt, def vals ) {
		if(vals==null) vals = [];
        def s = txt =~ /\{\w\}/ ;
        def sb = new StringBuffer();
        int i = 0;
        while (s.find()) {
           if(vals.size()-1 <= i) vals << "";
           def val = vals[i++];
           if( !val ) val = "?";
           s.appendReplacement(sb,"<u>"+val+"</u>"); 
        } 
        s.appendTail(sb);
        return sb.toString();
	}

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'obo_app_transmittal' }", index=0 )
	public void getTransmittalReport( def evt ) {
		def p = evt.args[0];

		def result = evt.result;
		def transmittalid = p.parameters.objid;
		if(!transmittalid) throw new Exception("objid is required in requirement checklist report")

		def t = transmittalEm.find([objid: transmittalid]).first();
		if(!t) throw new Exception("Transmittal " + transmittalid + " not found ");

		//load the items
		def items = null;

		
		if(t.type == "requirement") {
			items = reqEm.find( [transmittalid : t.objid ] ).orderBy("type.sortorder").list();
		}
		else {
			items = findingEm.find( [transmittalid : t.objid ] ).orderBy("parent.type.sortindex ASC, checklistitem.indexno ASC").list();
			items.each {
				if(it.checklistitem?.title ) {
					def part = it.particulars;
					it.particulars = formatText( it.checklistitem.title, it.values );
					if(	!it.particulars.endsWith(".")) it.particulars += ". ";
					if(part) it.particulars += part;
				}
				if(it.attachment ) {
					it.attachment = "image:" + it.attachment;
				};
				it.section = [type: [title: it.parent.type.title ]];
			}	
		}

		def doctypeid = (t.type.replace("-","_") + "_TRANSMITTAL").toUpperCase();;
		def doctype = doctypeEm.find( [objid: doctypeid ] ).first();
		if(!doctype) throw new Exception("document type " + doctypeid + " not found");

		def ea = t.app;
		ea.dtfiled = t.dtcreated;
		ea.receiver = t.createdby;
		ea.transmittalno = t.objid;
		ea.transmittaltype = t.type;
		ea.permittype = t.app.doctitle;
		ea.items = items;
		ea.endorserid = (t.endorserid) ? t.endorserid : doctype.endorserid;
		ea.approverid = (t.approverid) ? t.approverid : doctype.approverid;
		ea.template = (t.template) ? t.template : doctype.template;
		ea.reportheader = (t.reportheader)? t.reportheader : doctype.reportheader;

		//apply signatories
		if(ea.endorserid) {
			ea.endorser = sigEm.find( [objid: ea.endorserid ]).first();
		}
		if(ea.approverid) {
			ea.approver = sigEm.find( [objid: ea.approverid]).first();
		}
		result.data = ea;
	}	

	//we should use matches in this case bec. the reportid was required
  	@Before(pattern="JasperReportEmailService.send", eval="#{ args[0].reportid.matches('.*_transmittal') }", index=-10000)
    public void emailTransmittal(def evt) {
        def o = evt.args[0];
        def refid = o.refid;

        //the report id here must be changed and will not use the <type>_transmittal pattern
        o.attachments = [
            [ title: "Transmittal.pdf", 
                reportid: "obo_app_transmittal", 
                parameters: [objid: refid ]
            ]
        ];
        o.to = o.to;
        o.subject = o.subject;
        o.message = o.message;
        o.connection = "obo-email-server";
    }  

	@Before(pattern="JasperEmailQueueService.send", eval="#{args[0].reportid == 'obo_app_transmittal' }")
	public void beforeSendEmail( def evt ) {
		def p = evt.args[0];

		def t = transmittalEm.find([objid: p.refid ]).first();
		def ea = t.app;
		def templateName = (t.type + "_transmittal").toLowerCase();
		if ( !p.to ) p.to = ea.contact.email;
		p.info = ea;
		p.reportid = templateName;
	}



}