import com.rameses.annotations.*; 

class OboAppDocFormReportInterceptor {
	
	@DataContext("vw_obo_app_doc")
	def vwSubdocEm;

	@DataContext("vw_obo_app_doc_info")
	def vwInfoEm;

	@DataContext(dynamic=true)
	def db;

	@DataContext("vw_obo_app_taskitem")
	def vwAppTaskitemEm;

	@DataContext("obo_app_taskitem_task")
	def evalTaskEm;

	@DataContext("vw_obo_payment")
	def vwDocPayEm;

	@DataContext("obo_payment")
	def payEm;

	@DataContext("vw_obo_app")
	def appEm;

	@DataContext("obo_app_doc_checklist")
	def checkListEm;

	@DataContext("obo_app_professional")
	def appProfEm;

	@DataContext("sys_signature")
	def signatureEm;

	@DataContext("building_permit_rpu")
	def rpuEm;

	private def findDoc( def id ) {
		def docsub = vwSubdocEm.find([objid: id ]).first();
		def vapp = appEm.find( [objid: docsub.appid ] ).select("appclass,schemaname,doctitle").first();

		def vwAppEm = db.lookup( vapp.schemaname);
		def appTaskEm = db.lookup( vapp.appclass + "_task"); 

		def app = vwAppEm.find( [objid: docsub.appid ] ).first();

		if( docsub.template == null ) {
			docsub.template = docsub.doctype.template;
		}
		if( docsub.reportheader == null ) {
			docsub.reportheader = docsub.doctype.reportheader;
		}
		docsub.header = docsub.reportheader;

		if( docsub.endorserid == null ) {
			docsub.endorserid = docsub.doctype.endorserid;		
		}
		if( docsub.approverid == null ) {
			docsub.approverid = docsub.doctype.approverid;		
		}

		//load also the RPUs for display. get the tdno and tctno
		def rpus = rpuEm.find( [appid: docsub.appid ] ).list();
		if( rpus ) {
			docsub.tdno = rpus*.tdno.join(",");
			docsub.titleno = rpus*.titleno.join(",");			
			//this is to fix existing tctno field
			docsub.tctno = rpus*.titleno.join(",");
			docsub.lotno = rpus*.lotno.join(",");						
		}		
		docsub.contact = app.contact;

		docsub.applicant = app.applicant;
		docsub.location = app.location;
		docsub.occupancytype = app.occupancytype;
		docsub.appno = app.appno;
		docsub.trackingno = app.trackingno;
		docsub.apptype = app.apptype?.toUpperCase();

		//this is dtfiled due to the reports
		docsub.dtfiled = app.appdate;		
		docsub.appdate = app.appdate;
		docsub.permitno = app.controlno;
		docsub.title = app.title;
		docsub.numunits = app.numunits;
		docsub.fixedcost = app.fixedcost;
		docsub.projectcost = app.projectcost;
		docsub.dtproposedconstruction = app.dtproposedconstruction;
		docsub.dtexpectedcompletion = app.dtexpectedcompletion;
		docsub.totalfloorarea = app.totalfloorarea;
		docsub.height = app.height;
		docsub.numfloors = app.numfloors;

		//if completed, used for occupancy
		docsub.dtactualcompleted = app.dtactualcompleted;
		if(app.bldgpermit) docsub.bldgpermit = app.bldgpermit; 

		if(app.worktypes) {
			docsub.worktypes = app.worktypes?.join(", ");
		}	

		//determine the date received
		docsub.dtreceived = appTaskEm.find([refid: docsub.appid, state:'receiving' ] ).select("enddate").first()?.enddate;		

		//load checklist items if any
		def chklist = checkListEm.find( [parentid: docsub.objid]).list();
		chklist.each {
			docsub.put( it.typeid.toLowerCase(), 1 );
			if( it.values  ) {
				for(int i=0;i < it.values.size();i++) {
					docsub.put( it.typeid.toLowerCase()+"_"+i, it.values[i] );
				}
			}
		}

		//load infos
		def infos = vwInfoEm.find( [parentid: docsub.objid ] ).list();
		infos.each {
			def vname = it.name.toLowerCase();
			if( it.datatype == 'date')  docsub.put( vname,  it.datevalue);
			else if( it.datatype == 'decimal') docsub.put(vname, it.decimalvalue);
			else if( it.datatype == 'integer') docsub.put(vname, it.intvalue);
			else if( it.datatype == 'boolean') docsub.put(vname, ( (it.booleanvalue == 0) ? false: true));
			else if( it.datatype == 'lookup' ) docsub.put( vname, [key:it.lookupkey, value:it.lookupvalue] );
			else it.value = docsub.put(vname,  it.stringvalue);
		}

		//load fees for subtype
		def feeParentid = docsub.objid;
		if( docsub.doctype.subtypeof !=null ) {
			def papp = vwSubdocEm.find( [appid: docsub.appid, doctypeid: docsub.doctype.subtypeof ]).first();
			feeParentid = papp.objid;
		}

		def rct = payEm.find( [appid: docsub.appid ] ).first();
		if( rct ) {
			docsub.receiptno = rct.refno;
			docsub.receiptdate = rct.refdate;
			docsub.receiptamount = rct.amount;
			def pay = vwSubdocEm.find( [ objid: feeParentid ] ).select("amount").first();
			docsub.amount = pay?.amount;		
		}

		//load evaluator. find the associated task item
		def zeval = vwAppTaskitemEm.find( [appid: docsub.appid, sectionid: docsub.sectionid ] ).first();
		if( zeval ) {
			//load evaluator
			def tsk = evalTaskEm.find( [refid: zeval.objid ] ).where(" state IN ('evaluation', 'inspection') ").orderBy("dtcreated DESC").first();
			if(tsk) {
				def info = [:];
				if(tsk.assignee?.objid) {
					info = signatureEm.find( [userid: tsk.assignee.objid ] ).first();
				}
				if(!info) info = [displayname: tsk.assignee.name];
				if(tsk.state == 'evaluation') {
					docsub.evaluator = info;
					docsub.dtevaluated = tsk.enddate;
				}
				else {
					docsub.inspector = info;
					docsub.dtinspected = tsk.enddate;
				}
				docsub.dtapproved = tsk?.enddate;
			}
		}
	
		//load issuer
		if( docsub.issuedby?.objid ) {
			def info = signatureEm.find( [userid: docsub.issuedby.objid] ).first();
			if( info ) {
				docsub.issuedby.signature = info.signature;
				docsub.issuedby.name = info.displayname;
			}	
		}

		//this is a temporary test
		if( docsub.endorserid ) {
			docsub.endorser = signatureEm.find( [objid: docsub.endorserid] ).first(); 
		}
		if( docsub.approverid ) {
			docsub.approver = signatureEm.find( [objid: docsub.approverid] ).first(); 
		}
		docsub.permittype = vapp.doctitle;
		docsub.supervisor = app.supervisor;

		//load the main documents for reference
		def dlist = vwSubdocEm.find([appid: docsub.appid ]).where(" doctype.type='MAIN' AND objid <> :id", [id: id] ).select("controlno,dtissued,doctype.objid,amount").list();
		def zz = [:];
		dlist.each {
			def z = [controlno: it.controlno, dtissued: it.dtissued, amount: it.amount ];
			docsub.put( it.doctype.objid.toLowerCase(), z );
		}

		//documents that have professionals
		if(docsub.doctype.sectionid ) {
			def s1 = docsub.doctype.sectionid;
			def prof1 =	appProfEm.find( [appid: docsub.appid ] ).where(  "section.objid = :sectionid ", [sectionid: s1] ).first();
			if(prof1) {
				def z1 = [:];
				z1.designprofessional = prof1.designprofessional;  
				z1.supervisor = prof1.supervisor;
				docsub.put( s1.toLowerCase(), z1);		
			}	
		}
		return docsub;
	}


	@After(pattern="FormReportService.getData", eval="#{args[0].reportid == 'obo_app_doc' }")
	public void getReport( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def id = p.parameters.objid;
		def docsub = findDoc( id );
		//extra settings
		result.printable = (docsub.controlid != null);
		result.data = docsub;
	}	

	@Before(pattern="JasperEmailQueueService.send", eval="#{args[0].reportid == 'obo_app_doc' }")
	public void beforeSendEmailQueue( def evt ) {
		def p = evt.args[0];
		if(!p.to) throw new Exception("contact email must be provided");

		def app = vwSubdocEm.find( [objid: p.refid ] ).first();
		p.info = [doctype:app.doctype.title, controlno: app.controlno, doctype: app.doctype.objid];
		p.connection = "obo-email-server";
	}


    @Before(pattern="JasperReportEmailService.send", eval="#{ args[0].reportid == 'obo_app_doc' }", index=-10000)
    public void onSendEmail(def evt) {
        def o = evt.args[0];
        def refid = o.refid;
        def doc = findDoc( refid );
        o.attachments = [
            [ 	title: doc.doctype.objid + ".pdf", 
            	reportid: o.reportid, 
            	parameters: [objid: refid ],
            	data: doc 
            ]
        ];
        o.to = o.to;
        o.subject = o.subject;
        o.message = o.message;
        o.connection = "obo-email-server";
    } 


}