import com.rameses.annotations.*;
import com.rameses.util.*;
import obo.facts.*;
import java.text.*;
import enterprise.utils.*;
import java.rmi.server.*;
import treasury.utils.*;
import treasury.facts.*;

public class OboAppFeeService  {

	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("OboAppDocInfoService")
	def infoSvc;

	@Service("OboAppDocService")
	def docSvc;

	@DataContext("obo_app_fee")
	def feeEm;

	@DataContext("obo_app_doc")
	def docEm;

	@DataContext("vw_obo_app_doc")
	def vwDocEm;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

  	@DataContext("vw_obo_app")
    def vwAbstractAppEm;

	@DataContext("obo_app")
    def abstractAppEm;

	@DataContext(dynamic=true)
	def db;

	@ProxyMethod
	public def getFees( def o ) {
		return feeEm.find(o).orderBy("item.sortorder").list();
	}

	void updateTotals( def o ) {
		if(!o.parentid) return;
		def total = feeEm.find([parentid:o.parentid]).select("c:{SUM(amount)}").val();
		docEm.find( [objid:o.parentid]).update( [amount: total] );
	}	

	//This will save the fees and returns the total
	@ProxyMethod
	public def saveFees(def o) {
		//group totals by doctypeid
		o.items.each {
			//delete if there are existing items
			def zz = feeEm.find( [appid: it.appid, itemid: it.item.objid ] ).first();
			if( zz ) feeEm.find( [objid: zz.objid] ).delete();
			feeEm.create( it );
		}
		o.items.groupBy{ it.parentid }.each { k,v->
			updateTotals( [parentid: k] );
		}
		abstractAppEm.find([objid: o.appid]).update( [assessed: 0 ] );
	}

	@ProxyMethod
	public def saveFee(def o ) {
		if(!o.appid) throw new Exception("appid is required in saveFee");
		if(o.objid) {
			feeEm.find( [objid: o.objid] ).update( o );
		}
		else {
			feeEm.create( o );
		}
		updateTotals( o );
		abstractAppEm.find([objid: o.appid]).update( [assessed: 0 ] );
	}

	@ProxyMethod
	public def removeFee(def o ) {
		if(o.objid) {
			def p = feeEm.find( [objid: o.objid ] ).first();
			if(!p) throw new Exception("Item not found");
			o.parentid = p.parentid;
			o.appid = p.appid;
			feeEm.find( [objid: o.objid] ).delete();
		}
		updateTotals( o );
	}

	@ProxyMethod
	public def clearFees(def o ) {
		if(!o.appid && !o.parentid) throw new Exception("appid or parentid is required in clearFees");
		feeEm.find( [parentid: o.parentid ]).delete();
		updateTotals( o );
	}

	@ProxyMethod
	public def assess( def o ) {
		def sd = vwDocEm.find([objid: o.parentid ] ).first();	
		if(!sd.app.schemaname) throw new Exception("schemaname in doc app must be set"  );

		def vwAppEm = db.lookup( sd.app.schemaname );
		def vapp = vwAppEm.find( [objid: sd.appid ] ).first();

		def occ = vapp.occupancytype;

		def infos = [];
		def factBuilder = o.factBuilder;
		if(!factBuilder) factBuilder = new FactBuilder();

		factBuilder.facts << new BuildingInfo( vapp ); 
        factBuilder.facts << new OccupancyType( occ );

		factBuilder.facts << new OboDocument( doctype: sd.doctype.objid, appid: sd.appid );
		infos = infoSvc.getInfos( [parentid: sd.objid ] );

		infos.each {
			if( it.datatype == "decimal" ) 	    factBuilder.facts << new OboDecimalInfo(it);
			else if( it.datatype == "integer" ) factBuilder.facts << new OboIntegerInfo(it);
			else if( it.datatype == "boolean" ) factBuilder.facts << new OboBooleanInfo(it);
			else if( it.datatype == "lookup" )  factBuilder.facts << new OboLookupInfo(it);
		}

		def req = [:];
		req.factBuilder = factBuilder;
		req.rulename = "oboassessment";
		req.params = [rulename:req.rulename];
		req.include_items = false;

		def res = billingRuleSvc.execute( req );

		def items = [];
		res.billitems.findAll{ it.billcode && it.item == null && it.amount > 0 }.each {

			def p = itemAcctEm.find( [objid: it.billcode ] ).first();
			//check if the document type equals to the requesting. if it does not match 
			if(p.doctypeid == sd.doctype.objid ) {
				it.parentid = sd.objid;
			}
			else {
				def pdoc = docSvc.findDoc( [create_if_not_exist: true, appid:sd.appid, doctypeid: p.doctypeid ] );
				it.parentid = pdoc.objid;
			}
			it.item = p;
			it.amtpaid = 0;
			it.appid = sd.appid;
			it.dynamic = 0;
			it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
			items << it;			
		};
		if( o.savefees == true ) {
			saveFees( [appid: sd.appid, items: items] );
		};
		return [items: items];
	}

	@ProxyMethod
	public def assessAll( def o ) {
		if(!o.appid) throw new Exception("appid is required in OboAppFeeService.assessAll");
		def docList = vwDocEm.find( [appid: o.appid ]).where( "requirefee > 0 AND (amount IS NULL OR amount=0) ").list();
		docList.each { v->
			assess( [parentid: v.objid, savefees: true] );
		}
	}


	//This should be called
	@ProxyMethod
	public void buildPaymentOrder( def o ) {
		if(!o.appid) throw new Exception("Please specify appid in OboAppAssessmentService.assess");
		
		//assess all documents first before proceeding
		//assessAll( o );

		//clear all dynamic items first
		//delete first all dynamic items
        feeEm.find( [appid: o.appid] ).where( " dynamic = 1 ").delete();	

        def vitems = feeEm.find( [appid: o.appid ] ).list();
        def factBuilder = new FactBuilder();
        vitems.each {
        	def bi = new BillItem( refid: it.objid, billcode: it.item.objid, amount: it.amount );	
        	bi.tag = it.item.tag;
            factBuilder.facts << bi;
        };

		//get the appclass first
		def app = vwAbstractAppEm.find( [objid: o.appid ]).select("objid,appclass").first();
        factBuilder.facts << new OboPaymentOrder( apptype: app.appclass.toUpperCase()  );

        def req = [:];
        req.factBuilder = factBuilder;
        req.rulename = "oboassessment";
        req.params = [rulename:req.rulename];
        req.include_items = false;
        def res = billingRuleSvc.execute( req );

        def items = [];
        res.billitems.findAll{ it.refid == null }.each {
            def p = itemAcctEm.find( [objid: it.billcode ] ).first();
            def pdoc = docSvc.findDoc( [create_if_not_exist: true, appid:app.objid, doctypeid: p.doctypeid ] );
            it.parentid = pdoc.objid;
            it.item = p;
            it.dynamic = 1;
            it.amtpaid = 0;
            it.appid = app.objid;
            it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
            items << it;            
        };
		saveFees( [appid: o.appid, items: items] );

		//check if all items are mapped. If not throw error.
		def itemList = feeEm.find( [appid: o.appid] ).where("item.item.objid IS NULL").list();
		if(itemList) {
			throw new Exception("The ff. fees are not mapped. \n" + itemList*.item.title.join("\n"))			
		}


		abstractAppEm.find( [objid: app.objid]).update( [assessed: 1 ] );
	}

	@ProxyMethod
	public void validateAllFees(def o ) {
		if(!o.appid) throw new Exception("appid is required in OboAppFeeService.validateAllFees");
		def app = abstractAppEm.find([objid: o.appid]).select("assessed").first();
		if(app.assessed!=1 )
			throw new Exception("Please generate payment order first");

		/*	
		def docList = vwDocEm.find( [appid: o.appid ]).where( "requirefee > 0 AND (amount IS NULL OR amount=0) " ).list();
		if(docList) {
			throw new Exception("The following document require fees to be assessed: \n" + docList*.doctype.title.join("\n") );
		}
		*/
		
		//check first if allitems are mapped
		def unmappedList = feeEm.find([appid: o.appid]).where("item.item.objid IS NULL").list();
		if(unmappedList) {
			throw new Exception("Please map the ff. fees first: \n" + unmappedList*.item.title );
		}	
	}

}