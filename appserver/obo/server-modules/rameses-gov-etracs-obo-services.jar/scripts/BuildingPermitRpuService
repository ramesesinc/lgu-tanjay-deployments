import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

public class BuildingPermitRpuService  {

	@Service(value="RPTCertificationOnlineService", connection="rpt")
	def rptSvc;

	@Service(value="TDOnlineService", connection="rpt")
    def tdSvc;

    @Service(value="RptOboPluginService", connection="rpt")
    def rptPluginSvc;

    @Service(value="EntityService", connection="entity")
    def entitySvc;

    @Service("OboAppDocService")
    def appDocSvc;

    @Service("OboAppFeeService")
    def appFeeSvc;


	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit_rpu")
	def rpuEm;

	@DataContext("obo_app_entity")
	def entityEm;

	@DataContext("building_permit")
	def appEm;

    @DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

	@DataContext("obo_app_doc")
	def docEm;

	@DataContext("obo_doctype")
	def docTypeEm;

	@DataContext("obo_payment")
	def paymentEm;

	@ProxyMethod
	public void generateDocs( def o ) {
		def app, list;
		if( o.appid ) {
			app = appEm.find( [objid: o.appid ]).first();
			list = rpuEm.find( [appid: o.appid] ).list();
		}
		else {
			def rpu = rpuEm.find( [objid: o.objid] ).first();
			app = appEm.find( [objid: rpu.appid ]).first();
			list = [rpu];
		}

		list.each {
			def params = [:];
			params.entityid = entityEm.find( [objid: it.ownerid] ).first()?.profileid;			
			if(!params.entityid ) 
				throw new Exception("entityid is required in BuildingApplicationRptService.generateDocs");
			params.faas = [objid:  it.refid, tdno: it.tdno];
			params.refid = app.objid;
			//tracking no. is used becuase we cannot yet generate the appno at this time.
			params.refno = app.trackingno;	
			params.refdate = app.appdate;
			if( !params.refdate ) params.refdate = dateSvc.getServerDate();
			params.reftype = "building_permit";
			params.purpose = "For Building Permit Application"

			def u = [:];
			if( !it.truecopycertid ) {
				try {
					def cert = rptSvc.issueTrueCopy(params);
					u.truecopycertid = cert.objid;				
				}
				catch(e) {
					throw new Exception( "Error in issuing true copy. " + e?.message );
				}
			}
			if( !it.taxclearanceid ) {
				try {
					params.faases = [params.faas];
					def cert = rptSvc.issueTaxClearance(params);
					u.taxclearanceid = cert.objid;				
				}
				catch(e) {
					def errmsg = e.message
					if( errmsg == null) {
						errmsg = "Please contact the assessors office. This entry may have been cancelled";
					}
					throw new Exception( "Error in issuing tax clearance. " + errmsg );					
				}
			}
			if(u) {
				rpuEm.find( [objid: it.objid ]).update( u );
			}
		}
		assessFees( [appid: app.objid ] );
	}

	@ProxyMethod
	public void assessFees( def o ) {
		if(!o.appid) throw new Exception("appid is required in assess fees");
		
		//search if there is the RPT_DOCUMENT if not create it.
		def doc = appDocSvc.findDoc( [appid:o.appid, doctypeid:'BUILDING_RPT', create_if_not_exist: true] );

		boolean _saveFees = true;
		if( o._savefees !=null ) _saveFees = o._savefees;

		def factBuilder = new FactBuilder();
		appFeeSvc.assess( [factBuilder: factBuilder, parentid: doc.objid, savefees: _saveFees ] );

		factBuilder.facts.findAll{ it instanceof RpuEntry }.each {
			rpuEm.find( [objid: it.objid] ).update( [taxclearancefee: it.taxclearancefee, truecopycertfee: it.truecopycertfee ] );	
		}
	}

 	@ProxyMethod
    public def findRpu( def params ) {
        if(!params.appid) throw new Exception("appid is required");    
        if(!params.refno) throw new Exception("refno is required");
		def info = tdSvc.verifyTaxDec(params);
		if(!info)
			throw new Exception("RPU not found");
        info.refid = info.objid;
        if(!info.taxpayer?.objid ) 
        	throw new Exception("Error in OboOnlineService. There is no taxpayer.objid returned in TDOnlineService");
        def txp = info.remove("taxpayer");   
        info.lotno = info.remove("cadastrallotno");
        
        def entity = entitySvc.open( [objid: txp.objid ] );
        info.owner.putAll( 
            [
                profileid: entity.objid,
                profileno: entity.entityno,
                birthdate: entity.birthdate,
                email: entity.email,
                mobileno: entity.mobileno,
                gender: entity.gender,
                name: entity.name,
                entitytype: entity.type,
                lastname: entity.lastname,
                firstname: entity.firstname,
                middlename: entity.middlename,
                tin: entity.tin,
                address: entity.address
            ]
        );
        info.owner.resident =  (entity.address.type == "nonlocal") ? 0 : 1;

        //check if applicant is the owner of the lot
		def app = vwAppEm.find( [objid: params.appid ] ).first();
		if( app.applicant?.profileid == entity.objid ) {
			info.lotowned = 1;
		}
		else {
			info.lotowned = 0;
		};
		info.remove("objid");
		info.appid = params.appid;
        return info;
    }

    @ProxyMethod
    public void validateRptDocs(def o) {
		if(!o.appid) throw new Exception("Please include appid in BuildingPermitRpuService.validateRptDocs");

		//check if there is no RPT DOCUMENT, you wont need to validate it
		if( !docEm.find( [appid: o.appid, doctypeid: "BUILDING_RPT" ]).exists()) {
			return;
		}	

    	def exists = rpuEm.find( [appid: o.appid ]).where("(truecopycertid IS NULL OR taxclearanceid IS NULL)").exists();
    	if(exists)
    		throw new Exception("Please generate the RPT Documents first before proceeding");
    }

    //This is called by the obo.actions.AddBuildingRpuInfo for the rules
    @ProxyMethod
    public def getRpuFacts(def o) {
		if(!o.appid) throw new Exception("Please include appid in BuildingPermitRpuService.validateRptDocs");
		def rptList = rpuEm.find( [appid: o.appid ] ).list();
		def r = [:];	
		r.totalcount = rptList.size();
		r.byownercount = rptList.groupBy{ it.ownerid }.size();

		def facts = [];
		facts << new RpuCount( r );
		rptList.each {
			facts << new RpuEntry( [objid: it.objid, ownerid: it.ownerid] );
		}	
		return facts;
    }

    @ProxyMethod
    public void postPayment( def o ) {
    	if(!o.appid) throw new Exception("Please include appid in BuildingPermitRpuService.validateRptDocs");
    	//find the payment made

		def pmt = paymentEm.find( [appid: o.appid ]).first();
		def refno = pmt.refno;
		def refdate = pmt.refdate;

		def rpuList = rpuEm.find( [appid: o.appid ] ).list();
		rpuList.each {
			if(it.taxclearanceid && it.taxclearancefee) 
				rptSvc.postPayment( [objid:it.taxclearanceid, orno:refno, ordate:refdate, oramount:it.taxclearancefee ] );		
			if(it.truecopycertid && it.truecopycertfee) 
				rptSvc.postPayment( [objid:it.truecopycertid, orno:refno, ordate:refdate, oramount:it.truecopycertfee ] );		
		}

    }



}